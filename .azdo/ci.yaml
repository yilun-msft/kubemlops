resources:
  containers:
    - container: mlops
      image: mcr.microsoft.com/mlops/python:latest

pr: none
trigger:
  branches:
    include:
      - master
  paths:
    include:
      - code/

variables:
  - group: kubeflow-azdo-sample

pool:
  vmImage: ubuntu-latest

stages:
  - stage: "Code_Quality_Check"
    displayName: "Code Quality Check"
    jobs:
      - job: "Code_Quality_Check"
        displayName: "Code Quality Check"
        container: mlops
        timeoutInMinutes: 0
        steps:
          - template: code-quality-template.yml

  - stage: "Build_and_Push_KF_Component_Images"
    displayName: "Build and Push KF Component Images"
    variables:
      BUILD_ALL_IMAGES: true
    jobs:
      - job:
        steps:
        - template: build-container-template.yml
          parameters:
            sourceLocation: 'code/mlflow-project/'
            dockerFile: 'code/mlflow-project/Dockerfile'
            acr: 'kubeflowyoacr'
            repository: 'mexicanfood/mlflowproject'
            taskname: 'mlflowproject_container'
        - template: build-container-template.yml
          parameters:
            sourceLocation: 'code/azdocallback/'
            dockerFile: 'code/azdocallback/Dockerfile'
            acr: 'kubeflowyoacr'
            repository: 'mexicanfood/azdocallback'
            taskname: 'azdocallback_container'
        - template: build-container-template.yml
          parameters:
            sourceLocation: 'code/preprocess/'
            dockerFile: 'code/preprocess/Dockerfile'
            acr: 'kubeflowyoacr'
            repository: 'mexicanfood/preprocess'
            taskname: 'preprocess_container'
        - template: build-container-template.yml
          parameters:
            sourceLocation: 'code/register-artifacts/'
            dockerFile: 'code/register-artifacts/Dockerfile'
            acr: 'kubeflowyoacr'
            repository: 'mexicanfood/registerartifacts'
            taskname: 'registerartifacts_container'
        - template: build-container-template.yml
          parameters:
            sourceLocation: 'code/register-mlflow/'
            dockerFile: 'code/register-mlflow/Dockerfile'
            acr: 'kubeflowyoacr'
            repository: 'mexicanfood/register-mlflow'
            taskname: 'registermlflow_container'
        - template: build-container-template.yml
          parameters:
            sourceLocation: 'code/aml-register-model/'
            dockerFile: 'code/aml-register-model/Dockerfile'
            acr: 'kubeflowyoacr'
            repository: 'mexicanfood/aml-register-model'
            taskname: 'aml_register_model_container'
        - template: build-container-template.yml
          parameters:
            sourceLocation: 'code/training/'
            dockerFile: 'code/training/Dockerfile'
            acr: 'kubeflowyoacr'
            repository: 'mexicanfood/training'
            taskname: 'training_container'
        - template: build-container-template.yml
          parameters:
            sourceLocation: 'code/databricks/'
            dockerFile: 'code/databricks/Dockerfile'
            acr: 'kubeflowyoacr'
            repository: 'mexicanfood/databricks-notebook'
            taskname: 'databricks_container'
        - publish: $(Pipeline.Workspace)/image_tags
          artifact: image_tags
          displayName: "Publish image_tags"

  - stage: "Build_Upload_Run_Kubeflow_Pipeline"
    displayName: 'Build, Upload, and Run Kubeflow Pipeline'
    variables:
    - group: kubeflow-azdo-sample
    jobs:
      - job: "Upload_Pipeline"
        steps:
        - download: current
          artifact: image_tags
          displayName: "Download image_tags"
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.7'
            addToPath: true
            architecture: 'x64'
        - task: CmdLine@2
          displayName: "Install Kubeflow SDK" 
          inputs:
            script: |
              pip install kfp --upgrade
        - task: Bash@3
          displayName: "Compile Pipeline"
          inputs:
            targetType: 'inline'
            script: |
              if [ -d "$(Pipeline.Workspace)/image_tags" ]; then
                export MLFLOWPROJECT_TAG=`cat $(Pipeline.Workspace)/image_tags/mlflowproject_container`
                export AZDOCALLBACK_TAG=`cat $(Pipeline.Workspace)/image_tags/azdocallback_container`
                export PREPROCESS_TAG=`cat $(Pipeline.Workspace)/image_tags/preprocess_container`
                export REGISTERARTIFACTS_TAG=`cat $(Pipeline.Workspace)/image_tags/registerartifacts_container`
                export REGISTERMLFLOW_TAG=`cat $(Pipeline.Workspace)/image_tags/registermlflow_container`
                export AML_REGISTER_MODEL_TAG=`cat $(Pipeline.Workspace)/image_tags/aml-register-model_container`
                export TRAINING_TAG=`cat $(Pipeline.Workspace)/image_tags/training_container`
                export DATABRICKS_TAG=`cat $(Pipeline.Workspace)/image_tags/databricks_container`
              fi

              python code/pipelineazdo.py
        - task: Bash@3
          name: "kfpauth"
          displayName: "Authenticate KFP"
          inputs:
            targetType: 'inline'
            script: |
              pip3 install adal --upgrade
              # Avoid returning token from python script directly to avoid it getting exposed over stdoutput      
              echo "##vso[task.setvariable variable=KFP_API_TOKEN;issecret=true;isOutput=true]$(python code/utils/get_kfp_auth_token.py --tenant $(KF_TENANT_ID) --service_principal $(KF_CLIENT_ID) --sp_secret $(KF_CLIENT_SECRET) 2>&1 >/dev/null)"               
        - task: KubeflowUploadPipeline@0
          displayName: "Upload Pipeline to KubeFlow" 
          inputs:
            kubeflowEndpoint: '$(KF_ENDPOINT)'
            bearerToken: '$(kfpauth.KFP_API_TOKEN)'
            kubeflowPipelineTask: '$(KF_UPLOAD_CHOICE)'
            pipelineFilePath: '$(KF_PIPELINE_FILE)'
            newPipelineName: '$(KF_NEW_PIPELINE_NAME)'
            existingPipelineName: '$(KF_EXISTING_PIPELINE_NAME)'
            versionName: '$(KF_NEW_VERSION_NAME)'
            newPipelineDescription: "{'build_number':'$(Build.BuildNumber)','repo_name':'$(Build.Repository.Name)','branch_name':'$(Build.SourceBranchName)','queued_by':'$(Build.QueuedBy)'}"
        - task: KubeflowExperimentRun@0
          displayName: "Create Experiment with New Pipeline"
          inputs:
            kubeflowEndpoint: '$(KF_ENDPOINT)'
            bearerToken: '$(kfpauth.KFP_API_TOKEN)'
            pipeline: '$(KF_NEW_PIPELINE_NAME)'
            useDefaultVersion: '$(KF_USE_DEFAULT_VERSION)'
            pipelineVersion: '$(KF_NEW_PIPELINE_NAME)'
            experiment: '$(KF_EXPERIMENT_CHOICE)'
            experimentName: '$(KF_EXPERIMENT_NAME)'
            runName: '$(KF_RUN_NAME)'
            pipelineParams: '$(KF_PIPELINE_PARAMS)'
            runDescription: "{'build_number':'$(Build.BuildNumber)','repo_name':'$(Build.Repository.Name)','branch_name':'$(Build.SourceBranchName)','queued_by':'$(Build.QueuedBy)'}"
            waitForRunToFinish: '$(KF_WAIT_TO_COMPLETE)'
            createNewRun: $(KF_CREATE_NEW_RUN)
          condition: 
            and(succeeded(), eq(variables['kf_upload_choice'], 'uploadNew'))

        - task: KubeflowExperimentRun@0
          displayName: "Create Experiment with New Pipeline Version"
          inputs:
            kubeflowEndpoint: '$(KF_ENDPOINT)'
            bearerToken: '$(kfpauth.KFP_API_TOKEN)'
            pipeline: '$(KF_EXISTING_PIPELINE_NAME)'
            useDefaultVersion: $(KF_USE_DEFAULT_VERSION)
            pipelineVersion: '$(KF_NEW_VERSION_NAME)'
            experiment: '$(KF_EXPERIMENT_CHOICE)'
            experimentName: '$(KF_EXPERIMENT_NAME)'
            runName: '$(KF_RUN_NAME)'
            pipelineParams: '$(KF_PIPELINE_PARAMS)'
            runDescription: '$(KF_RUN_DESCRIPTION)'
            waitForRunToFinish: '$(KF_WAIT_TO_COMPLETE)'
            createNewRun: $(KF_CREATE_NEW_RUN)
          condition: 
            and(succeeded(), eq(variables['kf_upload_choice'], 'uploadNewVersion'))

        - task: Bash@3
          name: "setpipelinevars"
          displayName: "Set Variables for Invoking Pipeline"
          inputs:
            targetType: 'inline'
            script: |
              # Write your commands here
              KFPIPELINEVERSIONID=$(kf_pipeline_version_id)
              echo "##vso[task.setvariable variable=KFPIPELINEVERSIONID;isOutput=true]$KFPIPELINEVERSIONID"
              KPEXPID=$(kf_experiment_id)
              echo "##vso[task.setvariable variable=KPEXPID;isOutput=true]$KPEXPID"
              # echo $(kf_pipeline_version_id)
              # echo $(kf_experiment_id)

      # - job: "Invoke_Pipeline"
      #   dependsOn: "Upload_Pipeline"
      #   pool: server
      #   variables:
      #     PIPELINE_VERSION_ID: $[ dependencies.Upload_Pipeline.outputs['setpipelinevars.KFPIPELINEVERSIONID'] ]
      #     EXPERIMENT_ID: $[ dependencies.Upload_Pipeline.outputs['setpipelinevars.KPEXPID'] ]          
      #     KFP_API_TOKEN: $[ dependencies.Upload_Pipeline.outputs['kfpauth.KFP_API_TOKEN'] ]          
      #   steps:
      #   - task: private-kfexperimentrun-async@0
      #     displayName: "Invoke Pipeline"
      #     inputs:
      #       kubeflowEndpoint: '$(KF_ENDPOINT)'
      #       bearerToken: '$(KFP_API_TOKEN)'
      #       pipelineVersionID: '$(PIPELINE_VERSION_ID)'
      #       experimentID: '$(EXPERIMENT_ID)'
      #       runName: '$(KF_RUN_NAME)'
      #       pipelineParams: '$(KF_PIPELINE_PARAMS2)'
      #       runDescription: "{'build_number':'$(Build.BuildNumber)','repo_name':'$(Build.Repository.Name)','branch_name':'$(Build.SourceBranchName)','queued_by':'$(Build.QueuedBy)'}"


